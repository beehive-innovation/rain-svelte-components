{
	"desc": "Sale contract which throws a sale for reserve token against a redeemable erc20 token which can be later redeemed.",
	"name": "Sale",
	"alias": "sale",
	"source": "https://github.com/rainprotocol/rain-protocol",
	"abiName": "Sale",
	"methods": [
		{
			"desc": "Initialize a new Sale contract.",
			"name": "initialize",
			"inputs": [
				{
					"desc": "The recipient of the proceeds of a Sale, if/when the Sale is successful.",
					"name": "Recepient Address",
					"path": "[14].inputs[1].components[0]",
					"abiName": "recipient"
				},
				{
					"desc": "The reserve token address that the Sale is deonominated in.",
					"name": "Reserve Token Address",
					"path": "[14].inputs[1].components[1]",
					"abiName": "reserve"
				},
				{
					"desc": "The number of seconds before this sale can timeout. SHOULD be well after the expected end time as a timeout will fail an active or pending sale regardless of any funds raised.",
					"name": "Sale Timeout",
					"path": "[14].inputs[1].components[2]",
					"abiName": "saleTimeout"
				},
				{
					"desc": "Forwarded to `Cooldown` contract initialization.",
					"name": "Cooldown Duration",
					"path": "[14].inputs[1].components[3]",
					"abiName": "cooldownDuration"
				},
				{
					"desc": "Defines the amount of reserve required to raise that defines success/fail of the sale. Reaching the minimum raise DOES NOT cause the raise to end early (unless the 'can live' expression allows it of course).",
					"name": "Minimum Raise Threshold",
					"path": "[14].inputs[1].components[4]",
					"abiName": "minimumRaise"
				},
				{
					"desc": "The minimum amount of rTKN that must remain in the Sale contract unless it is all purchased, clearing the raise to 0 stock and thus ending the raise.",
					"name": "Dust Size",
					"path": "[14].inputs[1].components[5]",
					"abiName": "dustSize"
				},
				{
					"desc": "Name of the Redeemable ERC20 token as defined by Open Zeppelin ERC20.",
					"name": "Reddemable ERC20 Name",
					"path": "[14].inputs[2].components[0].components[0]",
					"abiName": "name"
				},
				{
					"desc": "Symbol of the Redeemable ERC20 token as defined by Open Zeppelin ERC20.",
					"name": "Reddemable ERC20 Symbol",
					"path": "[14].inputs[2].components[0].components[1]",
					"abiName": "symbol"
				},
				{
					"desc": "Reddemable ERC20 distributor address of the initial supply, MAY be zero.",
					"name": "Reddemable ERC20 Distributor",
					"path": "[14].inputs[2].components[0].components[2]",
					"abiName": "distributor"
				},
				{
					"desc": "Redeemable ERC20 Initial supply to mint, MAY be zero.",
					"name": "Reddemable ERC20 Initial Supply",
					"path": "[14].inputs[2].components[0].components[3]",
					"abiName": "initialSupply"
				},
				{
					"desc": "Tier contract address to gate the sale",
					"name": "Tier Address",
					"path": "[14].inputs[2].components[1]",
					"abiName": "tier"
				},
				{
					"desc": "Minimum tier level of the Tier contract that is gating the sale required in order to be able to participate in the sale",
					"name": "Minimum Tier",
					"path": "[14].inputs[2].components[2]",
					"abiName": "minimumTier"
				},
				{
					"desc": "Determines if the remaining Redeemable ERC20 tokens after the sale has ended in success should be burned or transfered to the Recepient address, 0x00 address would burn the remaining rTKNs.",
					"name": "Distribution End Forwarding Address",
					"path": "[14].inputs[2].components[3]",
					"abiName": "distributionEndForwardingAddress"
				}
			],
			"abiName": "initialize",
			"expressions": [
				{
					"desc": "An expression to calculate the rTKN price and sale's can live state.",
					"name": "Sale Expression",
					"path": "[14].inputs[1].components[6]",
					"abiName": "evaluableConfig",
					"contextColumns": [
						{
							"desc": "Base context column",
							"name": "Base",
							"alias": "base",
							"cells": [
								{
									"desc": "The contract or EOA that called transfer",
									"name": "Caller",
									"alias": "caller",
									"cellIndex": 0
								},
								{
									"desc": "The address of the Sale contract this expression is for",
									"name": "This Contract",
									"alias": "this-contract",
									"cellIndex": 1
								}
							],
							"columnIndex": 0
						}
					]
				}
			]
		}
	]
}
